<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bcrypt on n0rdy personal blog</title>
    <link>https://n0rdy.foo/tags/bcrypt/</link>
    <description>Recent content in Bcrypt on n0rdy personal blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Jan 2025 08:30:00 +0200</lastBuildDate>
    <atom:link href="https://n0rdy.foo/tags/bcrypt/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>When Postgres index meets Bcrypt</title>
      <link>https://n0rdy.foo/posts/20250131/when-postgres-index-meets-bcrypt/</link>
      <pubDate>Fri, 31 Jan 2025 08:30:00 +0200</pubDate>
      <guid>https://n0rdy.foo/posts/20250131/when-postgres-index-meets-bcrypt/</guid>
      <description>&lt;p&gt;Hello there! In the &lt;a href=&#34;https://n0rdy.foo/posts/20250121/okta-bcrypt-lessons-for-better-apis/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;previous post “What Okta Bcrypt incident can teach us about designing better APIs”&lt;/a&gt;, we discussed the 72-chars limit of the input value of the Bcrypt hashing algorithm that caused quite a big security incident in the industry. That reminded me about another example of Bcrypt misuse that I, personally, came across a few years ago while investigating a quite nasty performance issue with one of the services. Let&amp;rsquo;s jump right into it!&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Okta Bcrypt incident can teach us about designing better APIs</title>
      <link>https://n0rdy.foo/posts/20250121/okta-bcrypt-lessons-for-better-apis/</link>
      <pubDate>Wed, 22 Jan 2025 18:00:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20250121/okta-bcrypt-lessons-for-better-apis/</guid>
      <description>&lt;p&gt;Hello there! If you follow tech news, you might have heard about the &lt;a href=&#34;https://trust.okta.com/security-advisories/okta-ad-ldap-delegated-authentication-username/&#34; target=&#34;_blank&#34; rel=&#34;nofollow&#34;&gt;Okta security incident&lt;/a&gt; that was reported on 1st of November. The TLDR of the incident was this:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The Bcrypt algorithm was used to generate the cache key where we hash a  combined string of userId + username + password. Under a specific set of conditions, listed below, this could allow users to authenticate by  providing the username with the stored cache key of a previous  successful authentication.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
