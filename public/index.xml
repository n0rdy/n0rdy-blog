<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>n0rdy personal blog</title>
    <link>https://n0rdy.foo/</link>
    <description>Recent content on n0rdy personal blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Jan 2025 08:30:00 +0200</lastBuildDate>
    <atom:link href="https://n0rdy.foo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>When Postgres index meets Bcrypt</title>
      <link>https://n0rdy.foo/posts/20250131/when-postgres-index-meets-bcrypt/</link>
      <pubDate>Fri, 31 Jan 2025 08:30:00 +0200</pubDate>
      <guid>https://n0rdy.foo/posts/20250131/when-postgres-index-meets-bcrypt/</guid>
      <description>&lt;p&gt;Hello there! In the &lt;a href=&#34;https://n0rdy.foo/posts/20250121/okta-bcrypt-lessons-for-better-apis/&#34; target=&#34;_blank&#34;&gt;previous post “What Okta Bcrypt incident can teach us about designing better APIs”&lt;/a&gt;, we discussed the 72-chars limit of the input value of the Bcrypt hashing algorithm that caused quite a big security incident in the industry. That reminded me about another example of Bcrypt misuse that I, personally, came across a few years ago while investigating a quite nasty performance issue with one of the services. Let&amp;rsquo;s jump right into it!&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Okta Bcrypt incident can teach us about designing better APIs</title>
      <link>https://n0rdy.foo/posts/20250121/okta-bcrypt-lessons-for-better-apis/</link>
      <pubDate>Wed, 22 Jan 2025 18:00:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20250121/okta-bcrypt-lessons-for-better-apis/</guid>
      <description>&lt;p&gt;Hello there! If you follow tech news, you might have heard about the &lt;a href=&#34;https://trust.okta.com/security-advisories/okta-ad-ldap-delegated-authentication-username/&#34; target=&#34;_blank&#34;&gt;Okta security incident&lt;/a&gt; that was reported on 1st of November. The TLDR of the incident was this:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;The Bcrypt algorithm was used to generate the cache key where we hash a  combined string of userId + username + password. Under a specific set of conditions, listed below, this could allow users to authenticate by  providing the username with the stored cache key of a previous  successful authentication.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TIL: Ghostty - a new and quite promising terminal emulator</title>
      <link>https://n0rdy.foo/posts/20250118/til-ghostty/</link>
      <pubDate>Sat, 18 Jan 2025 22:30:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20250118/til-ghostty/</guid>
      <description>&lt;p&gt;Hello there! If you&amp;rsquo;ve been following my blog, you might have noticed that I&amp;rsquo;m usually leaning towards longreads as the style of my posts. And while I think such posts are great in general, it takes forever to prepare, write and edit them before publishing, which ends up in the very infrequent and inconsistent blogging ratio on my end.&lt;/p&gt;&#xA;&lt;p&gt;Lately, I&amp;rsquo;ve come across the &lt;a href=&#34;https://simonwillison.net/2022/Nov/6/what-to-blog-about/&#34; target=&#34;_blank&#34;&gt;“What to blog about”&lt;/a&gt; article by Simon Willison which, alongside other things, had a great insight about the “Today I Learned” type of short posts to share small bits of recently acquired knowledge with the audience. So, this is my attempt to incorporate that approach alongside the longreads that I will keep writing (I have a few topics planned, so stay tuned and &lt;a href=&#34;https://mail.n0rdy.foo/subscription/form&#34; target=&#34;_blank&#34;&gt;subscribe to my newsletter&lt;/a&gt; to receive an email once I publish a new post). Let&amp;rsquo;s gooooooo!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Demystifying OTPs: the logic behind the offline generation of tokens</title>
      <link>https://n0rdy.foo/posts/20241210/otp-offline-generation/</link>
      <pubDate>Tue, 10 Dec 2024 17:30:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20241210/otp-offline-generation/</guid>
      <description>&lt;p&gt;Hello there! Another evening, on my way back home, I decided to check the mailbox. I don&amp;rsquo;t mean my email inbox, but the old-school actual box where the postman puts the physical letters. And to my great surprise, I found an envelope there with something inside! While opening it, I spent a few moments hoping that it&amp;rsquo;s the decades delayed letter from Hogwarts. But then I had to get back down to Earth, once I noticed that it&amp;rsquo;s a boring &amp;ldquo;grown-up&amp;rdquo; letter from the bank. I skimmed through the text and realized that my &amp;ldquo;digital-only&amp;rdquo; bank for cool kids had been acquired by the biggest player on the local market. And as a token of the new beginning, they added this to the envelope:&lt;/p&gt;</description>
    </item>
    <item>
      <title>JWT, JWS, JWE and how to cook them</title>
      <link>https://n0rdy.foo/posts/20240328/jwt-jws-jwe-and-how-to-cook-them/</link>
      <pubDate>Thu, 28 Mar 2024 20:00:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20240328/jwt-jws-jwe-and-how-to-cook-them/</guid>
      <description>&lt;p&gt;Hello there! It&amp;rsquo;s been a while since I wrote here - all of a sudden, 2024 became way busier than I planned it to be. But hey, it&amp;rsquo;s good to be back!&lt;/p&gt;&#xA;&lt;p&gt;Similar to my previous post, &lt;a href=&#34;https://n0rdy.foo/posts/20240103/understanding-cors/&#34; target=&#34;_blank&#34;&gt;Understanding CORS&lt;/a&gt;, this one has the same backstory: lately, I have had to explain a few times to different people about such concepts as JSON Web Tokens (JWT), their structure, types, use cases, etc., so I realized that it would be smart to write a post about that and use it for the future reference. I hope it will be helpful for someone else out there.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding CORS</title>
      <link>https://n0rdy.foo/posts/20240103/understanding-cors/</link>
      <pubDate>Wed, 03 Jan 2024 17:00:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20240103/understanding-cors/</guid>
      <description>&lt;p&gt;Hello there! Happy New Year! I hope you had an opportunity to get some rest during the winter holidays and maybe even made a snowman or two =)&lt;/p&gt;&#xA;&lt;p&gt;Several days ago, I had a dialog with a friend of mine (let&amp;rsquo;s call her Eowyn) who has recently started her path in software engineering:&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Eowyn:&lt;/strong&gt; Hey, buddy! I&amp;rsquo;m building a web project that has the frontend and backend parts. Whenever I click a button on the UI (that triggers a DELETE request to the server), my browser blows with these errors:&#xA;&lt;img src=&#34;https://n0rdy.foo/images/screenshots/20240103-0001.webp&#34; alt=&#34;image&#34;&gt;&#xA;I tried calling the same endpoint with the &lt;code&gt;curl&lt;/code&gt; command, and it works. I did the same via Postman, and it also works. It makes no sense! What the heck?&lt;/p&gt;</description>
    </item>
    <item>
      <title>AI tools for software engineers: 5 things to be careful about/aware of</title>
      <link>https://n0rdy.foo/posts/20231226/ai-tools-for-software-engineers-limits-and-challenges/</link>
      <pubDate>Tue, 26 Dec 2023 15:25:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20231226/ai-tools-for-software-engineers-limits-and-challenges/</guid>
      <description>&lt;p&gt;Hello there! 2023 is about to end soon, so it&amp;rsquo;s a good time to sit and reflect on it. If we think about the tech industry, in general, it&amp;rsquo;s easy to define which topic was the hottest this year - AI. And the chances are that in 2024, this area will grow even bigger alongside the growing investments and the new astonishing scientific discoveries in this field.&lt;/p&gt;&#xA;&lt;p&gt;Unlike previous &amp;ldquo;big things&amp;rdquo; in tech, like blockchain, crypto, NFT, Web3, etc., AI is way more accessible and covers more use cases than the rest:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go concurrency simplified. Part 4: Post office as a data pipeline</title>
      <link>https://n0rdy.foo/posts/20231221/go-data-pipeline/</link>
      <pubDate>Thu, 21 Dec 2023 23:20:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20231221/go-data-pipeline/</guid>
      <description>&lt;p&gt;Hello there! The main part of my moving to a new place adventures seems to be behind. Since I&amp;rsquo;m still waiting for a furniture delivery, I&amp;rsquo;m writing this post while lying on the floor using my foam camping mat as a sofa. It&amp;rsquo;s not the most ideal setup, but it works. Anyway, I feel like today is the right time to start working on Part 4 of the &lt;a href=&#34;https://n0rdy.foo/series/go-concurrency-simplified&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;Go concurrency simplified&amp;rdquo; series&lt;/a&gt;. So far, we have learned and explored the key Go concurrency concepts, such as goroutines, channels, and the ways to synchronize and manage them. And today, we are going to combine all of our knowledge to make this world a better place to live (not really) or at least to help the post office (and our good old friend postman Bob) by making the queue handling process more effective. In the meantime, let&amp;rsquo;s briefly recap where we stopped in Part 3 (if you missed it, &lt;a href=&#34;https://n0rdy.foo/posts/20231214/go-concurrency-with-for-and-select/&#34; target=&#34;_blank&#34;&gt;here is the link&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go concurrency simplified. Part 3: Managing channels with for loops and select statements</title>
      <link>https://n0rdy.foo/posts/20231214/go-concurrency-with-for-and-select/</link>
      <pubDate>Thu, 14 Dec 2023 23:00:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20231214/go-concurrency-with-for-and-select/</guid>
      <description>&lt;p&gt;Hello there! I feel like I got my covid under control and will be back to daily life soon. In the meantime, I&amp;rsquo;m sitting at my desk in a nearly empty apartment (I&amp;rsquo;m moving soon) and wondering whether it&amp;rsquo;s possible to produce an echo if I scream loud enough 🤔 Anyway, I feel like it&amp;rsquo;s the right time to start working on Part 3 of the &amp;ldquo;Go concurrency simplified&amp;rdquo; series. Today, we&amp;rsquo;ll move on and explore the ways Go offers us to sync goroutines - it will get us closer to solving the queue situation in the post office we discussed last time. But let&amp;rsquo;s start with a short recap of where we stopped in the previous post (if you missed it, &lt;a href=&#34;https://n0rdy.foo/posts/20231211/go-waitgroup/&#34; target=&#34;_blank&#34;&gt;here is the link&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go concurrency simplified. Part 2: Syncing goroutines with sync.WaitGroup</title>
      <link>https://n0rdy.foo/posts/20231211/go-waitgroup/</link>
      <pubDate>Mon, 11 Dec 2023 18:00:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20231211/go-waitgroup/</guid>
      <description>&lt;p&gt;Hello there! Despite the beautiful snowy weather outside, I&amp;rsquo;m at home these days with covid, so I can dedicate some additional time to blogging.&lt;/p&gt;&#xA;&lt;p&gt;Last time, we discussed the very basic concepts of Go concurrency: goroutines and channels. If you missed that post, please check it out &lt;a href=&#34;https://n0rdy.foo/posts/20231207/go-channels-and-goroutines/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, it has some cool drawings =) Today, we&amp;rsquo;ll move on and explore the ways Go offers us to sync goroutines - it will help us get rid of some hacky workarounds we have used so far.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go concurrency simplified. Part 1: Channels and goroutines</title>
      <link>https://n0rdy.foo/posts/20231207/go-channels-and-goroutines/</link>
      <pubDate>Thu, 07 Dec 2023 22:00:00 +0100</pubDate>
      <guid>https://n0rdy.foo/posts/20231207/go-channels-and-goroutines/</guid>
      <description>&lt;p&gt;Christmas season is around the corner, that&amp;rsquo;s why another evening I was standing in a long queue at the post office with some Xmas presents packed inside the box. The line moved pretty slowly, as there was only one postman for the whole crowd of customers. The guy was running back and forth, and I felt really sorry for him. Not sure why, either out of boredom or because of several long evenings I spent working on &lt;a href=&#34;https://github.com/n0rdy/pippin&#34; target=&#34;_blank&#34;&gt;my open-source library&lt;/a&gt; for managing asynchronous pipelines, but my brain turned engineering mode on and tried to optimize the process of handling parcels.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://n0rdy.foo/about/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://n0rdy.foo/about/about/</guid>
      <description>&lt;p&gt;Hello there, and welcome! 👋&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s Mykola, a guy behind the n0rdy blog and a software engineer passionate about tech, books, and mountains.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;hellip;then something Tookish woke up inside him, and he wished to go and see the great mountains, and hear the pine trees and the waterfalls, and explore the caves, and wear a sword instead of a walking stick&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;This blog is about different aspects of software engineering and technology in general, as I don&amp;rsquo;t believe in &amp;ldquo;the best programming language/paradigm/framework&amp;rdquo; concepts.&#xA;I do have some preferences, though ;)&#xA;I hope you&amp;rsquo;ll find something useful here, learn a thing or two, or just have a good time reading my posts ☕️&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
